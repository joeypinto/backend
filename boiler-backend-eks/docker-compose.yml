version: "3"
services:
  # elasticsearch:
  #   image: "docker.elastic.co/elasticsearch/elasticsearch-oss:7.9.3"
  #   container_name: elasticsearch
  #   environment:
  #           #- "ES_JAVA_OPTS=-Xms1g -Xmx1g"
  #     - "discovery.type=single-node"
  #   ports:
  #     - "9200:9200"
  #   volumes:
  #     - elasticsearch_data:/usr/share/elasticsearch/data

  # kibana:
  #   image: "docker.elastic.co/kibana/kibana-oss:7.9.3"
  #   container_name: kibana
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     - ELASTICSEARCH_HOSTS:http://elasticsearch:9200
  #   depends_on:
  #     - elasticsearch
  
  # filebeat:
  #   build:
  #     context: ./backend/filebeat
  #   container_name: filebeat
  #   volumes:
  #     - ./backend/app/logs:/app/logs
  #   depends_on:
  #     - elasticsearch
  #     - kibana

  # metricbeat:
  #   build:
  #     context: ./backend/metricbeat   
  #   volumes:
  #     - metricbeat-data01:/usr/share/metricbeat/data   
  #   environment:
  #     ELASTICSEARCH_HOSTS: http://elasticsearch:9200    
  #   depends_on:
  #     - elasticsearch
  #     - kibana
  redis:
    image: "redis:4.0-alpine"
    command: redis-server --appendonly yes --requirepass devpassword
    volumes:
      - "./redis:/var/lib/redis/data"
    ports:
      - "6379:6379"
    networks:
      - "backend"
    
  rabbitmq:
    image: rabbitmq:3.8
    container_name: rabbitmq
    env_file: .env
    environment:
        RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
        RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
        RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
    ports:
        - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
        - "${RABBITMQ_PORT_2}:${RABBITMQ_PORT_2}"
  
  # flower:
  #   image: mher/flower
  #   environment: 
  #     - CELERY_BROKER_URL=amqp://guane:ilovefuelai@rabbitmq:5672/fuelai
  #     - FLOWER_PORT=5555
  #     - FLOWER_BASIC_AUTH=username:password
  #   ports: 
  #     - 5555:5555
  #   depends_on: 
  #     - rabbitmq
  # app:
  #   image: frontend
  #   build: ./frontend
  #   container_name: frontend
  #   env_file:
  #     - .env
  #   ports:
  #     - "8080:8080"
  web:
    build:
      context: ./backend
      args:
        - ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - ./backend:/app
      - ./backend/app/logs:/app/logs
    image: pythonweb     
    container_name: smarti
    ports:
      - "${PORT}:8000"
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - "backend"    
  db:
    image: postgres:12-alpine
    container_name: smartidb
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    env_file:
      - .env 
    networks:
      - "backend"    
  worker:
    build:
      context: backend
      dockerfile: Dockerfile
    command: celery worker -A app.tasks --loglevel=DEBUG -c 1
    env_file:
      - ".env"
    volumes:
      - "./backend:/app"
    networks:
      - "backend"
volumes:
  postgres_data:
  elasticsearch_data:
    driver: local
  metricbeat-data01:
    driver: local

networks:
  backend:
    name: "backend"
    driver: "bridge"    